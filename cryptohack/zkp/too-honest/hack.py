from pwn import *
import os
import json
from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse
from hashlib import sha512

def recvjson(conn):
    return json.loads(conn.recvline().decode())

def sendjson(data, conn):
    conn.sendline(json.dumps(data).encode())

def fast_pow(x, e, p):
    if e == 0:
        return 1
    y = fast_pow(x, e // 2, p)
    if e % 2 == 0:
        return (y * y) % p
    else:
        return (y * y * x) % p

N = 63506177426384102189597350894327047299059434133653566917776601666605133716653510828029111986956978773016660313963972378811186153674164948861199369871734498221215139927864142313488277305751745855210473314367642273303159704466900274761354992859789827863358153922459760984397971477173435625199596782211170294424560686178858124003120741008270927463303483018910205943877584647744143454984243979284973117132536957364157878132874844783228762221620863204335896952103079109039534346621267709606103312376393511653638269034043434410564414042523141936372609708140474052147124354400977541403247799192906955295291389109531010594317

g = 2

k1 = 512
k2 = 128
S = 2**k1
R = 2**(2*k2+k1)



conn = remote('socket.cryptohack.org', 13429)

msg = conn.recvline()
print(msg)

msg = recvjson(conn)
print(msg)

e = 2 ** (2*k2+k1 + 1)

data = {"e": e}
sendjson(data, conn)

msg = recvjson(conn)
print(msg)
z = msg["z"]

flag = z // e

print(long_to_bytes(flag))